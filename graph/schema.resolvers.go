package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"imdb/configs"
	"imdb/graph/model"
)

var (
	db = configs.ConnectDB()
)

// CreateMovie is the resolver for the createMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input model.NewMovie) (*model.Movie, error) {
	movie, err := db.CreateMovie(&input)
	return movie, err
}

// CreateActor is the resolver for the createActor field.
func (r *mutationResolver) CreateActor(ctx context.Context, input model.NewActor) (*model.Actor, error) {
	actor, err := db.CreateActor(&input)
	return actor, err
}

// Actors is the resolver for the actors field.
func (r *queryResolver) Actors(ctx context.Context) ([]*model.Actor, error) {
	actors, err := db.GetActors()
	return actors, err
}

// Movies is the resolver for the movies field.
func (r *queryResolver) Movies(ctx context.Context) ([]*model.Movie, error) {
	movies, err := db.GetMovies()
	return movies, err
}

// Actor is the resolver for the actor field.
func (r *queryResolver) Actor(ctx context.Context, input *model.FetchActor) (*model.Actor, error) {
	actor, err := db.SingleActor(input.ID)
	return actor, err
}

// Movie is the resolver for the movie field.
func (r *queryResolver) Movie(ctx context.Context, input *model.FetchMovie) (*model.Movie, error) {
	movie, err := db.SingleMovie(input.ID)
	return movie, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
